# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HDwupr9ELfBvADntY2-P95adtACJSBPv
"""

# !pip install --upgrade -q gspread
import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)



worksheet = gc.open('Style Output for ML').get_worksheet(0)
rows = worksheet.get_all_values()

dataframe=pd.DataFrame.from_records(rows)

dataframe

new_header = dataframe.iloc[0] #grab the first row for the header
newdata = dataframe[1:] #take the data less the header row
dataframe.columns = new_header #set the header row as the df header

dataframe

dataframe=dataframe.drop([0],axis=0)

dataframe

fet=[]

dataframe=dataframe.drop(['broad_category','shallow_category_name'] , axis=1)

dataframe

for i in dataframe.columns:
  fet.append(dataframe[i].unique())

fet

df=dataframe.copy()

df

a=list(dataframe['Pattern Type'].unique())
sum=0
cure=0
for i in a:
  if(len(i.split("|"))>=2):
    print(i)
    print(len(dataframe[dataframe['Pattern Type']==i]))
    print(len(i.split('|'))*len(dataframe[dataframe['Pattern Type']==i]))
    sum+=len(i.split('|'))*len(dataframe[dataframe['Pattern Type']==i])
    cure+=len(dataframe[dataframe['Pattern Type']==i])
    print('----------------------------------------------------')
print(sum)
print(cure)

a=list(dataframe['Details'].unique())
sum=0
cure=0
for i in a:
  if(len(i.split("|"))>=2):
    print(i)
    print(len(dataframe[dataframe['Details']==i]))
    print(len(i.split('|'))*len(dataframe[dataframe['Details']==i]))
    sum+=len(i.split('|'))*len(dataframe[dataframe['Details']==i])
    cure+=len(dataframe[dataframe['Details']==i])
    print('----------------------------------------------------')
print(sum)
print(cure)

collist=[]

for i in df.columns:
  collist.append(i)

collist

df.set_axis(['Type', 'Color', 'PatternType','Length','FitType','Neckline','SleeveLength','SleeveType','HemShaped','WaistLine','Details','Style'], axis=1, inplace=True)

df

df= (df.set_index(df.columns.drop('Color',1).tolist())
 .Color.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'Color'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('PatternType',1).tolist())
 .PatternType.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'PatternType'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('Length',1).tolist())
 .Length.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'Length'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('FitType',1).tolist())
 .FitType.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'FitType'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('Neckline',1).tolist())
 .Neckline.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'Neckline'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('SleeveLength',1).tolist())
 .SleeveLength.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'SleeveLength'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('SleeveType',1).tolist())
 .SleeveType.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'SleeveType'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('HemShaped',1).tolist())
 .HemShaped.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'HemShaped'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('WaistLine',1).tolist())
 .WaistLine.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'WaistLine'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('Details',1).tolist())
 .Details.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'Details'})
    .loc[:, df.columns] )

df= (df.set_index(df.columns.drop('Style',1).tolist())
 .Style.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'Style'})
    .loc[:, df.columns] )

df

df=df[df['Style']!='-']

df

uniquekey=[]
uniqueval=[]

df.columns

for i in df.columns:
  if(i=='Style'):
    continue
  else:
    for j in range(len(df[i].unique())):
      uniquekey.append(i)
      uniqueval.append(df[i].unique()[j])
    # uniquefeat.append(list(zip(i,df[i].unique()[j])))

uniqueattr=list(zip(uniquekey,uniqueval))

uniqueattr

len(uniqueval)

listofstyle=df['Style'].unique()

var_across_styles_pos=[]

var_across_styles_neg=[]

final_var_pos=[]

final_var_neg=[]

import statistics

def compute_var(listofstyles,key1,colno1,dataframe):
  dataframe=dataframe[dataframe[colno1]!='-']
  indexval=len(dataframe[(dataframe[colno1]==key1)])
  posprob=[]
  negprob=[]
  for i in listofstyles:
    num=(len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==i)]))/(indexval)
    posprob.append(num)
    negprob.append(1-num)
  final_var_pos.append(statistics.variance(posprob))
  final_var_neg.append(statistics.variance(negprob))
  var_across_styles_neg.append(negprob)
  var_across_styles_pos.append(posprob)

statistics.variance([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])

statistics.variance([0.9912445278298937, 0.7623514696685428, 0.7942464040025016, 0.9943714821763602, 0.9405878674171357, 0.9399624765478424, 0.9968730456535334, 0.9962476547842402, 0.5841150719199499, 1.0, 1.0, 1.0])

unique_style=list(df['Style'].unique())

unique_style

attributes=[]

for i in range(len(uniqueattr)):
  if(uniqueattr[i][1]=='-'):
    continue
  else:
    if(len(df[(df[uniqueattr[i][0]]==uniqueattr[i][1])])>50):
      compute_var(unique_style,uniqueattr[i][1],uniqueattr[i][0],df)
      attributes.append(uniqueattr[i])

sol=pd.DataFrame({'Variance_Pos_Style':var_across_styles_pos,'Variance_Neg_Style':var_across_styles_neg,'Variance_Pos':final_var_pos,'Variance_Neg':final_var_neg,'Attr':attributes})

single_varia_attr=[]

def checkifpossible(listofstyles,key1,colno1,dataframe,style):
  dataframe=dataframe[dataframe[colno1]!='-']
  indexval=len(dataframe[(dataframe[colno1]==key1)])
  posprob=[]
  negprob=[]
  for i in listofstyles:
    num=(len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==i)]))/(indexval)
    posprob.append(num)
    negprob.append(1-num)
  # final_var_pos.append(statistics.variance(posprob))
  # final_var_neg.append(statistics.variance(negprob))
  # var_across_styles_neg.append(negprob)
  # var_across_styles_pos.append(posprob)
  val=(len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==style)]))/(indexval)
  if(val>statistics.variance(posprob)):
    single_varia_attr.append(list(zip([key1,colno1])))

for i in range(len(uniqueattr)):
  if(uniqueattr[i][1]=='-'):
    continue
  else:
    if(len(df[(df[uniqueattr[i][0]]==uniqueattr[i][1])])>50):
      checkifpossible(unique_style,uniqueattr[i][1],uniqueattr[i][0],df,'boho')

len(single_varia_attr)

final_var_pos_cross=[]
var_across_styles_pos_cross=[]
var_across_styles_neg_cross=[]

def compute_var_double(listofstyles,key1,key2,colno1,colno2,dataframe):
  dataframe=dataframe[dataframe[colno1]!='-']
  dataframe=dataframe[dataframe[colno2]!='-']
  indexval=len(dataframe[(dataframe[colno1]==key1) & (dataframe[colno2]==key2)])
  posprob=[]
  negprob=[]
  for i in listofstyles:
    num=(len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))/(indexval)
    posprob.append(num)
    negprob.append(1-num)
  final_var_pos_cross.append(statistics.variance(posprob))
  var_across_styles_pos_cross.append(posprob)
  var_across_styles_neg_cross.append(negprob)

attr_cross1=[]
attr_cross2=[]

for i in range(len(uniqueattr)):
  for j in range(i,len(uniqueattr)):
    if((uniqueattr[i][1]=='-') | (uniqueattr[j][1]=='-') ):
      continue
    else:
      if(uniqueattr[i][1]!=uniqueattr[j][1]):
        if(len(df[(df[uniqueattr[i][0]]==uniqueattr[i][1]) & (df[uniqueattr[j][0]]==uniqueattr[j][1])])>0):
          compute_var_double(unique_style,uniqueattr[i][1],uniqueattr[j][1],uniqueattr[i][0],uniqueattr[j][0],df)
          attr_cross1.append(uniqueattr[i])
          attr_cross2.append(uniqueattr[j])

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('Variance').get_worksheet(1)
set_with_dataframe(worksheet, sol)

posvalues=[0.7,0.8,0.9,0.7,0.8,0.9,0.7,0.8,0.9,0.7,0.8,0.9,0.7,0.8,0.9]
negvalues=[0.6,0.6,0.6,0.65,0.65,0.65,0.7,0.7,0.7,0.75,0.75,0.75,0.8,0.8,0.8]

len(posvalues)

precision=[0.810,0.782,0.643,0.811,0.801,0.794,0.811,0.7964,0.786,0.8163,0.789,0.786,0.812,0.784,0.774]

recall=[0.708,0.6959,0.820,0.703,0.6809,0.660,0.703,0.668,0.658,0.70,0.660,0.658,0.698,0.668,0.630]

pn=list(zip(posvalues,negvalues))

import matplotlib.pyplot as plt
import numpy as np


# fig, ax = plt.subplots()
# plt.xticks( range(0,15,1) )
# labels = [item.get_text() for item in ax.get_xticklabels()]

# for i in range(len(labels)):
#   labels[i]=pn[i]

# ax.set_xticklabels(labels)

plt.rcParams['figure.figsize'] = [20, 20]
  
fig, ax = plt.subplots()
plt.xticks( range(0,15,1) )
labels = [item.get_text() for item in ax.get_xticklabels()]

for i in range(len(labels)):
  labels[i]=pn[i]

ax.set_xticklabels(labels)
plt.xlabel("(Negative,Positive)")
plt.ylabel("Precision")

plt.plot(precision)
plt.show()

import matplotlib.pyplot as plt
import numpy as np


# fig, ax = plt.subplots()
# plt.xticks( range(0,15,1) )
# labels = [item.get_text() for item in ax.get_xticklabels()]

# for i in range(len(labels)):
#   labels[i]=pn[i]

# ax.set_xticklabels(labels)

plt.rcParams['figure.figsize'] = [20, 20]
  
fig, ax = plt.subplots()
plt.xticks( range(0,15,1) )
labels = [item.get_text() for item in ax.get_xticklabels()]

for i in range(len(labels)):
  labels[i]=pn[i]

ax.set_xticklabels(labels)
plt.xlabel("(Negative,Positive)")
plt.ylabel("Recall")

plt.plot(recall)
plt.show()

nfeatures=[1433,1265,937,1401,1233,905,1377,1209,881,1363,1195,840,1345,1177,849]

len(nfeatures)

posprob=[]
  negprob=[]
  freqkey1=[]
  freqkey2=[]
  keys1=[]
  keys2=[]
  style=[]
  stylekey=[]
  stylefreq=[]

var=[]

import statistics

def one_at_time(listofstyles,key1,colno1,dataframe,min_occur_threshold,positive_freq_threshold,negative_freq_threshold):
  # dicto={'Style':[],'Attribute':[],'Key':[],'+ Prob':[],'- Prob':[],'Freq':[]}
  dataframe=dataframe[dataframe[colno1]!='-']
  indexval=len(dataframe[(dataframe[colno1]==key1)])
  # posprob=[]
  # negprob=[]
  # freq=[]
  # keys=[]
  # attribute=[]
  for i in listofstyles:
    if((indexval>=min_occur_threshold) & 
      ((((len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==i)]))/indexval)>=positive_freq_threshold) | ((1-((len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==i)]))/indexval))>=negative_freq_threshold ))):
      num=(len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==i)]))/(indexval)
      posprob.append(num)
      negprob.append(1-num)
      freqkey1.append(len(dataframe[(dataframe[colno1]==key1)]))
      keys1.append(key1)
      keys2.append(colno1)
      style.append(i)
      stylefreq.append(len(dataframe[(dataframe['Style']==i)]))
      stylekey.append(len(dataframe[(dataframe[colno1]==key1) & (dataframe['Style']==i)]))
  # var.append(statistics.variance(posprob))
  return list(zip([key1],[colno1]))
  # dicto['Style'].append(attr)
  # dicto['Attribute'].append(attribute)
  # dicto['Key'].append(keys)
  # dicto['+ Prob'].append(posprob)
  # dicto['- Prob'].append(negprob)
  # dicto['Freq'].append(freq)

for i in range(len(uniqueattr)):
  if(uniqueattr[i][1]=='-'):
    continue
  else:
     one_at_time(listofstyle,uniqueattr[i][1],uniqueattr[i][0],df,50,0,0)

uniqueattr

df['Style'].value_counts()

uniqueattr[0][0]

len(keys1)

solution=pd.DataFrame({'key1':keys2,	'value':keys1,	'style_name':style,	'value_freq':freqkey1,	'style_freq':stylefreq,	'value1Xvalue2':stylekey,	'positive_probability':posprob,	'negative_probability':negprob})

solution

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('Phinal Spread').get_worksheet(3)
set_with_dataframe(worksheet, solution)

posprob=[]
  negprob=[]
  freqkey1=[]
  freqkey2=[]
  keys1=[]
  keys2=[]
  style=[]
  key1key2=[]
  stylefreq=[]
  stylekey=[]
  keys=[]
  attr1=[]
  attr2=[]
  crossbew=[]

def two_at_time(listofstyles,key1,key2,colno1,colno2,dataframe,min_occur_threshold,positive_freq_threshold,negative_freq_threshold):
  # dicto={'Style':[],'Attribute':[],'Key':[],'+ Prob':[],'- Prob':[],'Freq':[]}
  dataframe=dataframe[dataframe[colno1]!='-']
  dataframe=dataframe[dataframe[colno2]!='-']
  indexval=len(dataframe[(dataframe[colno1]==key1) & (dataframe[colno2]==key2)])
  # posprob=[]
  # negprob=[]
  # freq=[]
  # keys=[]
  # attribute=[]
  for i in listofstyles:
    if((indexval>=min_occur_threshold) &
       ((((len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))/(indexval))>=positive_freq_threshold) | (1-((len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))/(indexval))>=negative_freq_threshold))):
      num=(len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))/(indexval)
      posprob.append(num)
      negprob.append(1-num)
      freqkey1.append(len(dataframe[(dataframe[colno1]==key1)]))
      freqkey2.append(len(dataframe[(dataframe[colno2]==key2)]))
      keys1.append(key1)
      keys2.append(key2)
      style.append(i)
      stylefreq.append(len(dataframe[(dataframe['Style']==i)]))
      key1key2.append(len(dataframe[(dataframe[colno1]==key1) & (dataframe[colno2]==key2)]))
      stylekey.append(len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))
      keys.append(key1+"|"+key2)
      attr1.append(colno1)
      attr2.append(colno2)
      crossbew.append(colno2+"|"+colno1)
  a=list(zip([key1],[colno1]))
  b=list(zip([key2],[colno2]))
  return list(zip([a],[b] ))

for i in range(len(uniqueattr)):
  for j in range(i,len(uniqueattr)):
    if((uniqueattr[i][1]=='-') | (uniqueattr[j][1]=='-') ):
      continue
    else:
      if(uniqueattr[i][1]!=uniqueattr[j][1]):
        if(len(df[(df[uniqueattr[i][0]]==uniqueattr[i][1]) & (df[uniqueattr[j][0]]==uniqueattr[j][1])])>0):
          two_at_time(['boho'],uniqueattr[i][1],uniqueattr[j][1],uniqueattr[i][0],uniqueattr[j][0],df,50,0.7,0.9)

len(keys1)

possible=[]

for i in range(len(uniqueattr)):
  for j in range(i+1,len(uniqueattr)):
    if((uniqueattr[i][1]=='-') | (uniqueattr[j][1]=='-') ):
      continue
    else:
      if(uniqueattr[i][1]!=uniqueattr[j][1]):
        if(len(df[(df[uniqueattr[i][0]]==uniqueattr[i][1]) & (df[uniqueattr[j][0]]==uniqueattr[j][1])])>0):
          n=uniqueattr[i][1]+'|'+uniqueattr[j][1]
          possible.append(n)

len(possible)

possible

len(keys1)

crossbew

keys1

for i in range(len(uniqueattr)):
  for j in range(i,len(uniqueattr)):
    if((uniqueattr[i][1]=='-') | (uniqueattr[j][1]=='-')):
      continue
    else:
      if((uniqueattr[i][0]=='Color') & (uniqueattr[j][0]=='PatternType')):
        if(len(df[(df[uniqueattr[i][0]]==uniqueattr[i][1]) & (df[uniqueattr[j][0]]==uniqueattr[j][1])])>0):
          two_at_time(listofstyle,uniqueattr[i][1],uniqueattr[j][1],uniqueattr[i][0],uniqueattr[j][0],df,1,0,0)

solution=pd.DataFrame({'key1':attr1	,'value1':keys1 , 'key1_freq':freqkey1,'key2':attr2,'value2':keys2,'key2_freq':freqkey2,'style_name':style,'style_freq':stylefreq,'key1*key2':keys,	'value1Xvalue2':key1key2,'value1*value2*style':stylekey,'positive_probability':posprob ,'negative_probability':negprob})

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('Phinal Spread').get_worksheet(2)
set_with_dataframe(worksheet, solution)

solution=pd.DataFrame({'key1':attr1	,'value1':keys1 , 'key1_freq':freqkey1,'key2':attr2,'value2':keys2,'key2_freq':freqkey2,'style_name':style,'style_freq':stylefreq,'key1*key2':keys,	'value1Xvalue2':key1key2,'value1*value2*style':stylekey,'positive_probability':posprob ,'negative_probability':negprob})

solution

solution

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('Phinal Spread').get_worksheet(1)
set_with_dataframe(worksheet, solution)

posprob=[]
  negprob=[]
  freqkey1=[]
  freqkey2=[]
  keys1=[]
  keys2=[]
  style=[]
  stylekey=[]
  stylefreq=[]

def one_at_time(listofstyles,key1,colno1,dataframe,min_occur_threshold,positive_freq_threshold,negative_freq_threshold):
  # dicto={'Style':[],'Attribute':[],'Key':[],'+ Prob':[],'- Prob':[],'Freq':[]}
  dataframe=dataframe[dataframe[colno1]!='-']
  indexval=len(dataframe[(dataframe[colno1]==key1)])
  # posprob=[]
  # negprob=[]
  # freq=[]
  # keys=[]
  # attribute=[]
  for i in listofstyles:
    if((indexval>=min_occur_threshold) & 
      ((((len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==i)]))/indexval)>=positive_freq_threshold) | ((1-((len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==i)]))/indexval))>=negative_freq_threshold ))):
      num=(len(dataframe[(dataframe[colno1]==key1) &  (dataframe['Style']==i)]))/(indexval)
      posprob.append(num)
      negprob.append(1-num)
      freqkey1.append(len(dataframe[(dataframe[colno1]==key1)]))
      keys1.append(key1)
      keys2.append(colno1)
      style.append(i)
      stylefreq.append(len(dataframe[(dataframe['Style']==i)]))
      stylekey.append(len(dataframe[(dataframe[colno1]==key1) & (dataframe['Style']==i)]))
  # var.append(statistics.variance(posprob))
  return list(zip([key1],[colno1]))
  # dicto['Style'].append(attr)
  # dicto['Attribute'].append(attribute)
  # dicto['Key'].append(keys)
  # dicto['+ Prob'].append(posprob)
  # dicto['- Prob'].append(negprob)
  # dicto['Freq'].append(freq)

for i in range(len(uniqueattr)):
  if(uniqueattr[i][1]=='-'):
    continue
  else:
     one_at_time(['boho'],uniqueattr[i][1],uniqueattr[i][0],df,50,0.65,0.9)

posprob=[]
  negprob=[]
  freqkey1=[]
  freqkey2=[]
  keys1=[]
  keys2=[]
  style=[]
  key1key2=[]
  stylefreq=[]
  stylekey=[]
  keys=[]
  attr1=[]
  attr2=[]
  crossbew=[]

def two_at_time(listofstyles,key1,key2,colno1,colno2,dataframe,min_occur_threshold,positive_freq_threshold,negative_freq_threshold):
  # dicto={'Style':[],'Attribute':[],'Key':[],'+ Prob':[],'- Prob':[],'Freq':[]}
  dataframe=dataframe[dataframe[colno1]!='-']
  dataframe=dataframe[dataframe[colno2]!='-']
  indexval=len(dataframe[(dataframe[colno1]==key1) & (dataframe[colno2]==key2)])
  # posprob=[]
  # negprob=[]
  # freq=[]
  # keys=[]
  # attribute=[]
  for i in listofstyles:
    if((indexval>=min_occur_threshold) &
       ((((len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))/(indexval))>=positive_freq_threshold) | (1-((len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))/(indexval))>=negative_freq_threshold))):
      num=(len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))/(indexval)
      posprob.append(num)
      negprob.append(1-num)
      freqkey1.append(len(dataframe[(dataframe[colno1]==key1)]))
      freqkey2.append(len(dataframe[(dataframe[colno2]==key2)]))
      keys1.append(key1)
      keys2.append(key2)
      style.append(i)
      stylefreq.append(len(dataframe[(dataframe['Style']==i)]))
      key1key2.append(len(dataframe[(dataframe[colno1]==key1) & (dataframe[colno2]==key2)]))
      stylekey.append(len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))
      keys.append(key1+"|"+key2)
      attr1.append(colno1)
      attr2.append(colno2)
      crossbew.append(colno2+"|"+colno1)
  a=list(zip([key1],[colno1]))
  b=list(zip([key2],[colno2]))
  return list(zip([a],[b] ))

for i in range(len(uniqueattr)):
  for j in range(i,len(uniqueattr)):
    if((uniqueattr[i][1]=='-') | (uniqueattr[j][1]=='-') ):
      continue
    else:
      if(uniqueattr[i][1]!=uniqueattr[j][1]):
        if(len(df[(df[uniqueattr[i][0]]==uniqueattr[i][1]) & (df[uniqueattr[j][0]]==uniqueattr[j][1])])>0):
          two_at_time(['boho'],uniqueattr[i][1],uniqueattr[j][1],uniqueattr[i][0],uniqueattr[j][0],df,50,0.65,0.9)

single_attr=list(zip(keys1,keys2))

len(single_attr)

single_attr

cross1=list(zip(keys1,attr1))

cross2=list(zip(keys2,attr2))

len(cross1)

cross1n=[]
cross2n=[]

for i in range(len(cross1)):
  if((cross1[i][0]=='ditsy floral') | (cross2[i][0]=='ditsy floral')):
    continue
  else:
    cross1n.append(cross1[i])
    cross2n.append(cross2[i])

fem=[]

for i in range(len(cross1)):
  stro=cross1[i][0]+'|'+cross2[i][0]
  fem.append(stro)

fem

cross1

# !pip install --upgrade -q gspread
import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)



worksheet = gc.open('Cross Spread').get_worksheet(1)
rows = worksheet.get_all_values()

n=pd.DataFrame(rows)

n.info()

n

new_header = n.iloc[0] #grab the first row for the header
newdata = n[1:] #take the data less the header row
n.columns = new_header #set the header row as the df header

n

n=n.drop([0],axis=0)

for i in range(len(pos)):
  for j in puff:
    if((pos.iloc[i,1]==j) | (pos.iloc[i,4]==j)):
      continue
    else:
      cross1.append(pos.iloc[i,1])
      attr1.append(pos.iloc[i,0])
      cross2.append(pos.iloc[i,4])
      attr2.append(pos.iloc[i,3])

poscross1=list(zip(cross1,attr1))
poscross2=list(zip(cross2,attr2))

remove_elems=[]

for i in range(len(single_attr)):
  for j in range(len(cross1)):
    if(single_attr[i]==cross1[i]):
      del(cross1[i])

len(cross1[i])

single_attr[1]==('shirt', 'Type')

len(cross1)

cross2

import numpy as np

def vectorcreator(listofsingleattribute,listofcrosses,listofcrosses2,dataframe):
  featvec=np.zeros(881)
  for i in range(len(listofsingleattribute)):
    if((list(dataframe[listofsingleattribute[i][1]])[0]==listofsingleattribute[i][0]) | (list(dataframe[listofsingleattribute[i][1]])[0]=='-')):
      featvec[i]=featvec[i]+1
  for i in range(len(listofcrosses)):
    if(((list(dataframe[listofcrosses[i][1]])[0]==listofcrosses[i][0]) & (list(dataframe[listofcrosses2[i][1]])[0]==listofcrosses2[i][0]))| (list(dataframe[listofcrosses[i][1]])[0]=='-') | (list(dataframe[listofcrosses2[i][1]])[0]=='-')):
      featvec[len(listofsingleattribute)+i]=featvec[len(listofsingleattribute)+i]+1
  return featvec

posvalues=[0.6,0.65,0.7,0.75,0.8]
negvalues=[0.7,0.8,0.9]

import numpy as np

for values in thresholds:
    posprob=[]
    negprob=[]
    freqkey1=[]
    freqkey2=[]
    keys1=[]
    keys2=[]
    style=[]
    stylekey=[]
    stylefreq=[] 
    for i in range(len(uniqueattr)):
      if(uniqueattr[i][1]=='-'):
        continue
      else:
        one_at_time(['boho'],uniqueattr[i][1],uniqueattr[i][0],df,values,0.65,0.9)
    single_attr=list(zip(keys1,keys2))


    print(len(single_attr))

    posprob=[]
    negprob=[]
    freqkey1=[]
    freqkey2=[]
    keys1=[]
    keys2=[]
    style=[]
    stylekey=[]
    stylefreq=[]     

    print("--------------------------------------------")


    posprob=[]
    negprob=[]
    freqkey1=[]
    freqkey2=[]
    keys1=[]
    keys2=[]
    style=[]
    key1key2=[]
    stylefreq=[]
    stylekey=[]
    keys=[]
    attr1=[]
    attr2=[]
    crossbew=[]


    for i in range(len(uniqueattr)):
      for j in range(i,len(uniqueattr)):
        if((uniqueattr[i][1]=='-') | (uniqueattr[j][1]=='-') ):
          continue
        else:
          if(uniqueattr[i][1]!=uniqueattr[j][1]):
            if(len(df[(df[uniqueattr[i][0]]==uniqueattr[i][1]) & (df[uniqueattr[j][0]]==uniqueattr[j][1])])>0):
              two_at_time(['boho'],uniqueattr[i][1],uniqueattr[j][1],uniqueattr[i][0],uniqueattr[j][0],df,values,0.6,0.9)
    

    cross1=list(zip(keys1,attr1))
    cross2=list(zip(keys2,attr2))


    print(len(cross1))


    possiblevec=[]
    for i in range(len(df)):
      possiblevec.append(vectorcreator(single_attr,cross1, cross2,df.iloc[[i]]))

    labelvecs=[]

    for i in range(len(df)):
      labelvec=np.zeros(1)
      if(list(df.iloc[[i]]['Style'])[0]=='boho'):
        labelvec[0]=labelvec[0]+1
      labelvecs.append(labelvec)

    X=pd.DataFrame(possiblevec)
    y=pd.DataFrame(labelvecs)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)
    clf = LogisticRegression(random_state=0).fit(X_train, y_train)
    preds=clf.predict(X_test)

    tp=0
    fp=0
    fpl=[]

    for i in range(len(y_test)):
      if((list(y_test.iloc[i])[0]==1) & (preds[i]==1)):
        tp=tp+1
      elif((list(y_test.iloc[i])[0]==1) & (preds[i]==0)):
        fpl.append(y_test.iloc[[i]].index[0])
      elif((list(y_test.iloc[i])[0]==0) & (preds[i]==1)):
        fp=fp+1
    # fpl.append(y_test.iloc[[i]].index[0])


    tpp=0
    fpp=0

    for i in range(len(y_test)):
      if(list(y_test.iloc[i])[0]==1):
        if(preds[i]==1):
          tpp=tpp+1
        elif(preds[i]==0):
          fpp=fpp+1

    print(f"Recall :{(tpp)/(tpp+fpp)} with threshold values {values}.")
    print(f"Precision :{(tp)/(tp+fp)}")
    print(f"No of tp-{tp} and fp-{fp} and fn-{fpp}.")
    print(f"Distribution in train data:{y_train.value_counts()} & Distribution in test data:{y_test.value_counts()}")

rec=[0.6457286432160804,0.6206030150753769,0.6155778894472361,0.6080402010050251,0.6055276381909548,0.6055276381909548,0.6030150753768844,0.5804020100502513,0.5778894472361809,0.5728643216080402,0.5753768844221105,0.5703517587939698,0.5603015075376885]

import matplotlib.pyplot as plt
import numpy as np


# fig, ax = plt.subplots()
# plt.xticks( range(0,15,1) )
# labels = [item.get_text() for item in ax.get_xticklabels()]

# for i in range(len(labels)):
#   labels[i]=pn[i]

# ax.set_xticklabels(labels)

plt.rcParams['figure.figsize'] = [20, 20]
  
fig, ax = plt.subplots()
plt.xticks( range(0,15,1) )
labels = [item.get_text() for item in ax.get_xticklabels()]

for i in range(len(thresholds)):
  labels[i]=thresholds[i]

ax.set_xticklabels(labels)
plt.xlabel("Threshold")
plt.ylabel("Recall")

plt.plot(rec)
plt.show()

prec=[0.8210862619808307,0.8205980066445183,0.8112582781456954,0.8093645484949833,0.8087248322147651,0.8141891891891891,0.8108108108108109,0.8108108108108109,0.8041958041958042,0.8142857142857143,0.8178571428571428,0.8136200716845878,0.8079710144927537]

thresholds=[50,55,60,65,70,75,80,85,90,95,100,105,110]

import matplotlib.pyplot as plt
import numpy as np


# fig, ax = plt.subplots()
# plt.xticks( range(0,15,1) )
# labels = [item.get_text() for item in ax.get_xticklabels()]

# for i in range(len(labels)):
#   labels[i]=pn[i]

# ax.set_xticklabels(labels)

plt.rcParams['figure.figsize'] = [20, 20]
  
fig, ax = plt.subplots()
plt.xticks( range(0,15,1) )
labels = [item.get_text() for item in ax.get_xticklabels()]

for i in range(len(thresholds)):
  labels[i]=thresholds[i]

ax.set_xticklabels(labels)
plt.xlabel("Threshold")
plt.ylabel("Precision")

plt.plot(prec)
plt.show()

plt.rcParams['figure.figsize'] = [20, 20]
  
fig, ax = plt.subplots()
plt.xticks( range(0,15,1) )
labels = [item.get_text() for item in ax.get_xticklabels()]

for i in range(len(thresholds)):
  labels[i]=thresholds[i]

ax.set_xticklabels(labels)
plt.xlabel("Threshold")
plt.ylabel("Recall")

plt.plot(rec)
plt.show()

from numpy.linalg import norm

import numpy as np

def vectorcreator(listofsingleattribute,listofcrosses,listofcrosses2,dataframe):
  featvec=np.zeros(len(listofsingleattribute)+len(listofcrosses))
  for i in range(len(listofsingleattribute)):
    if(list(dataframe[listofsingleattribute[i][1]])[0]==listofsingleattribute[i][0]):
      featvec[i]=featvec[i]+1
  for i in range(len(listofcrosses)):
    if(((list(dataframe[listofcrosses[i][1]])[0]==listofcrosses[i][0]) & (list(dataframe[listofcrosses2[i][1]])[0]==listofcrosses2[i][0]))):
      featvec[len(listofsingleattribute)+i]=featvec[len(listofsingleattribute)+i]+1
  # featvec=featvec.astype(int)
  # if(np.bincount(featvec)[0]!=881):
  # featvec=preprocessing.normalize(featvec.reshape(-1, 1), norm='l2')
  return featvec

dataframe=df.iloc[[1]]

len(vectorcreator(single_attr,cross1,cross2,dataframe))

vectorcreator(single_attr,cross1,cross2,dataframe)

df

possiblevec=[]

for i in range(len(df)):
  possiblevec.append(vectorcreator(single_attr,cross1, cross2,df.iloc[[i]]))

np.percentile(range(len(df)),10)

distribution=[]
actualnofeat=[]

for i in range(10,110,10):
  k=0
  for j in range(int(np.percentile(range(len(df)),i))):
    k=k+sum(possiblevec[j])
  actualnofeat.append(k)
  distribution.append(k/int(np.percentile(range(len(df)),i)))

len(distribution)

actualnofeat

distribution

possiblevec[1]

labelvecs=[]

for i in range(len(df)):
  labelvec=np.zeros(1)
  if(list(df.iloc[[i]]['Style'])[0]=='boho'):
    labelvec[0]=labelvec[0]+1
  labelvecs.append(labelvec)

len(labelvecs)

X=pd.DataFrame(possiblevec)

y=pd.DataFrame(labelvecs)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)
clf = LogisticRegression(random_state=0,class_weight="balanced", max_iter=1000).fit(X_train, y_train)
preds=clf.predict(X_test)

preds

clf.get_params()

clf.coef_[0]

clf.coef_.shape

clf.intercept_

coeff=pd.DataFrame(clf.coef_[0])

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('Cross Spread').get_worksheet(4)
set_with_dataframe(worksheet, coeff)

single_attr

f=single_attr+list(zip(cross1,cross2))

f

a=[]
for i in range(len(single_attr)):
  a.append(single_attr[i][0])

for i in range(len(cross1)):
  n=(cross1[i][0])+'|'+(cross2[i][0])
  a.append(n)

a

fw=pd.DataFrame({'Weights':clf.coef_[0],'Features':a,'Columns':f})

fw=fw.sort_values(by=['Weights'], ascending=False)

df2=fw.head(200)

df2

df1

Colu=pd.concat([df1,df2])

Colu

single_updated=[]
cross1_updated=[]
cross2_updated=[]

list(Colu['Columns'])[1]

for i in range(len(list(Colu['Columns']))):
  if(len(list(Colu['Columns'])[i][0])==2):
    cross1_updated.append(list(Colu['Columns'])[i][0]) 
    cross2_updated.append(list(Colu['Columns'])[i][1])
  else:
    single_updated.append(list(Colu['Columns'])[i])

len(single_updated)

b

a+fem

pred=pd.DataFrame(a+fem)

pred

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('Spread with 0.65pos & 0.9neg').get_worksheet(1)
set_with_dataframe(worksheet, fw)

pd.DataFrame(preds).value_counts()

y_test

clf.score(X_train, y_train)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,preds)

tp=0
fp=0

fpl=[]

for i in range(len(y_test)):
  if((list(y_test.iloc[i])[0]==1) & (preds[i]==1)):
    tp=tp+1
  elif((list(y_test.iloc[i])[0]==1) & (preds[i]==0)):
    fpl.append(y_test.iloc[[i]].index[0])
  elif((list(y_test.iloc[i])[0]==0) & (preds[i]==1)):
    # fpl.append(y_test.iloc[[i]].index[0])
    fp=fp+1

tp

fp

(tp)/(tp+fp)

tpp=0
fpp=0

for i in range(len(y_test)):
  if(list(y_test.iloc[i])[0]==1):
    if(preds[i]==1):
      tpp=tpp+1
    elif(preds[i]==0):
      fpp=fpp+1

fpp

tpp

(tpp)/(tpp+fpp)



y_test.value_counts()

y_train.value_counts()

list(y_test.iloc[0])

fpl=[]

fpl

len(single_attr)

clf.coef_[0]

posfeat=[]
negfeat=[]

df.iloc[[1]]

posfeat

negfeat

posfeatu=[]
negfeatu=[]
posum=[]
negsum=[]

for i in fpl:
  posfeat=[]
  negfeat=[]
  array=vectorcreator(single_attr,cross1,cross2,df.iloc[[i]])
  pos=0
  neg=0
  for i in range(79):
    if(array[i]==1):
      if(clf.coef_[0][i]>0):
        pos=pos+clf.coef_[0][i]
        a=single_attr[i][0]+'_'+str(clf.coef_[0][i])
        posfeat.append(a)
      else:
        neg=neg+clf.coef_[0][i]
        a=single_attr[i][0]+'_'+str(clf.coef_[0][i])
        negfeat.append(a)
  for i in range(79, (len(cross1)+79)):
    if(array[i]==1):
      if(clf.coef_[0][i]>0):
        pos=pos+clf.coef_[0][i]
        a=cross1[i-79][0]+'|'+cross2[i-79][0]+'_'+str(clf.coef_[0][i])
        posfeat.append(a)
      else:
        neg=neg+clf.coef_[0][i]
        a=cross1[i-79][0]+'|'+cross2[i-79][0]+'_'+str(clf.coef_[0][i])
        negfeat.append(a)
  posfeatu.append(posfeat)
  negfeatu.append(negfeat)
  posum.append(pos)
  negsum.append(neg)

posfeatu

a=pd.DataFrame()

for i in fpl:
  a=a.append(df.iloc[[i]])

a['posfeat']=posfeatu

a['negfeat']=negfeatu

a['possum']=posum

a['negsum']=negsum

a

from sklearn.metrics import log_loss

loss=[]

for i in range(0,100,10):
  clf = LogisticRegression(random_state=0 ,max_iter=i).fit(X_train, y_train)
  preds=clf.predict(X_test)
  loss.append(log_loss(y_test, preds))

loss

import matplotlib.pyplot as plt
plt.plot([10,20,30,40,50,60,70,80,90,100],loss)
plt.xlabel('Num_iters')
plt.ylabel('Log_Loss')
plt.title('Log_Loss v/s Num_iters')
plt.show()

acc=[]

for i in range(0,100,10):
  clf = LogisticRegression(random_state=0 ,max_iter=i).fit(X_train, y_train)
  preds=clf.predict(X_test)
  acc.append(accuracy_score(y_test,preds))

import matplotlib.pyplot as plt
plt.plot([10,20,30,40,50,60,70,80,90,100],acc)
plt.xlabel('Num_iters')
plt.ylabel('Accuracy')
plt.title('Accuracy v/s Num_iters')
plt.show()

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('Classifier Debug').get_worksheet(1)
set_with_dataframe(worksheet, a)

y_test[y_test[0]==0]

y_test[y_test[0]==0].index

y_test

infp=[]

list(y_test.iloc[1]==0)

for i in range(len(y_test)):
  if(list(y_test.iloc[i]==0)[0]==True):
    if(preds[i]==1):
      infp.append(y_test.iloc[[i]].index)

infp

zerobutone = pd.DataFrame()

for i in range(len(infp)):
  zerobutone=zerobutone.append(df.iloc[[infp[i][0]]])

zerobutone

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('Cross Spread').get_worksheet(6)
set_with_dataframe(worksheet, zerobutone)

# !pip install --upgrade -q gspread
import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)



worksheet = gc.open('Cross Spread').get_worksheet(5)
rows = worksheet.get_all_values()

Cross=pd.DataFrame(rows)

Cross

new_header = Cross.iloc[0] #grab the first row for the header
newdata = Cross[1:] #take the data less the header row
Cross.columns = new_header #set the header row as the df header

def vectorcreator(listofsingleattribute,listofcrosses,listofcrosses2,dataframe):
  featvec=np.zeros(881)
  for i in range(len(listofsingleattribute)):
    if(list(dataframe[listofsingleattribute[i][1]])[0]==listofsingleattribute[i][0]):
      featvec[i]=featvec[i]+1
  for i in range(len(listofcrosses)):
    if((list(dataframe[listofcrosses[i][1]])[0]==listofcrosses[i][0]) & (list(dataframe[listofcrosses2[i][1]])[0]==listofcrosses2[i][0])):
      featvec[len(listofsingleattribute)+i]=featvec[len(listofsingleattribute)+i]+1
  return featvec

dataframe=df.iloc[[1]]

vectorcreator(b,a,c,dataframe)

df

possiblevec=[]

for i in range(len(df)):
  possiblevec.append(vectorcreator(b,a,c,df.iloc[[i]]))

len(possiblevec)

possiblevec[1]

labelvecs=[]

for i in range(len(df)):
  labelvec=np.zeros(1)
  if(list(df.iloc[[i]]['Style'])[0]=='boho'):
    labelvec[0]=labelvec[0]+1
  labelvecs.append(labelvec)

len(labelvecs)

X=pd.DataFrame(possiblevec)

y=pd.DataFrame(labelvecs)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)
clf = LogisticRegression(random_state=0).fit(X_train, y_train)
preds=clf.predict(X_test)

preds

y_test

clf.score(X_train, y_train)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,preds)

tp=0
fp=0

list(y_test.iloc[0])

for i in range(len(y_test)):
  if((list(y_test.iloc[i])[0]==1) & (preds[i]==1)):
    tp=tp+1
  elif((list(y_test.iloc[i])[0]==0) & (preds[i]==1)):
    fp=fp+1

tp

fp

precision=(263)/(263+71)

precision

tpp=0
fpp=0

for i in range(len(y_test)):
  if(list(y_test.iloc[i])[0]==1):
    if(preds[i]==1):
      tpp=tpp+1
    elif(preds[i]==0):
      fpp=fpp+1

b

fpp

tpp

precisionpos=(262)/(262+136)

y_test.value_counts()

y_train.value_counts()

precisionpos

y_test,preds=trainclassifier(X,y)

preds

y_test

X_test

y_test

for i in range(len(a)):
    if((list(dataframe[a[i][1]])[0]==a[i][0]) & (list(dataframe[c[i][1]])[0]==c[i][0])):
      print(a[i][1])
      print(a[i][0])
      print(c[i][1])
      print(c[i][0])
      print('-----------------------------')

dataframe

for i in range(len(b)):
  # print(list(dataframe[b[i][1]]))
    if((list(dataframe[b[i][1]])[0]==b[i][0])==True):
      print('yo')
      print(list(dataframe[b[i][1]])[0])

dataframe[b[1][1]]==b[1][0]

featvec=np.zeros(881)
for i in range(len(b)):
    if((dataframe[b[i][1]]==b[i][0])==True):
      featvec[i]=featvec[i]+1
for i in range(len(c)):
    if(((dataframe[c[i][1]]==c[i][0]) & (dataframe[a[i][1]]==a[i][0]))==True):
      featvec[len(b)+i]=featvec[len(b)+i]+1

vectorcreator(b,a,c,df.iloc[[1]])

a

for i in range(100,300):
  print(a[i])

len(a)

len(keys1)

def vectorcreator(listofattributes):
  featurevec=np.zeros(len(listofattributes))
  for i in range(len(listofattributes)):

dataframe[13].unique()

cross_styles=[]

for i in dataframe['Style'].unique():
  if(len(i.split("|"))>=2):
    cross_styles.append(i)

cross_styles

len("elegant|sexy|casual".split("|"))

maind = pd.DataFrame(columns=dataframe.columns)

maind

dk=dataframe[dataframe['Style']=='elegant|sexy|casual']

dk

(dk.set_index(dk.columns.drop('Style',1).tolist())
 .Style.str.split('|', expand=True)
      .stack()
     .reset_index()
    .rename(columns={0:'Style'})
    .loc[:, dk.columns] )

for i in dataframe[13].unique():
  if(len(i.split("|"))==2):
    newd=dataframe[dataframe[13]==i] 
    newdcopy = newd.copy()
    newdcopy=newdcopy.replace(to_replace =i, 
                            value =i.split("|")[0])
    newd=newd.replace(to_replace = i, 
                            value =i.split("|")[1])
    # maind=maind.append(newd)
    # maind=maind.append(newdcopy)
    maind=maind.append(pd.concat([newd, newdcopy],ignore_index=True, axis=0))
  elif(len(i.split("|"))>2):
    newd=dataframe[dataframe[13]==i] 
    newdcopy = newd.copy() 
    newdcopy2 = newd.copy()
    newdcopy=newdcopy.replace(to_replace =i, 
                            value =i.split("|")[0])
    newd=newd.replace(to_replace =i, 
                            value =i.split("|")[1])
    newdcopy2=newdcopy2.replace(to_replace =i, 
                            value =i.split("|")[2])
    # maind=maind.append(newd)
    # maind=maind.append(newdcopy)
    # maind=maind.append(newdcopy2)
    maind=maind.append(pd.concat([newd, newdcopy,newdcopy2],ignore_index=True, axis=0))

maind

dataframe[13].value_counts()

cross_styles

for i in cross_styles:
  dataframe=dataframe[dataframe[13]!=i]

dataframe[13].value_counts()

dataframe

newdata=pd.concat([dataframe , maind],ignore_index=True)

newdata

newdata[13].value_counts()

prefer=[]
for i in newdata[13].unique():
  if(len(newdata[newdata[13]==i])>100):
    prefer.append(i)

prefer

newdata

for i in range(2,13):
  newdata=newdata[newdata[i]!='-']

newdata[13].value_counts()

for i in newdata.columns:
  for j in range(1,len(newdata[i].unique())):
      vari(prefer,newdata[i].unique()[j],i,newdata)

UniqueFeatures=[]
for i in newdata.columns:
  UniqueFeatures.append(newdata[i].unique())

UniqueFeatures[0]

for i in range(len(newdata.columns)):
  (newdata.columns[i],UniqueFeatures[i])

UniqueFeature=list(zip(singcross[singcross[2]=='boho'][0],singcross[singcross[2]=='boho'][1]))

UniqueFeature

for i in range(len(UniqueFeature)):
      one_at_time(prefer,UniqueFeature[i][1],UniqueFeature[i][0],newdata,20,0.7,0.7)

solution

features=[]

for i in range(2,13):
  for j in newdata[i].unique():
      features.append(j)

len(features)

features

for i in features:
  if i not in keys1:
    print(i)

len(keys1)/len(prefer)

newdata

for i in range(len(newdata['Color'].unique())):
  for j in range(len(newdata['Pattern Type'].unique())):
    if(len(newdata[(newdata['Color']==newdata['Color'].unique()[i]) & (newdata['Pattern Type']==newdata['Pattern Type'].unique()[j])])>0):
      if(newdata['Color'].unique()[i]=='-' or newdata['Pattern Type'].unique()[j]=='-'):
        continue
      else:
        two_at_time(prefer,newdata['Color'].unique()[i],newdata['Pattern Type'].unique()[j],'Color','Pattern Type',newdata,1,0,0)

for j in range(1,len(newdata[2].unique())):
  for k in range(1,len(newdata[6].unique())):
    if(len(newdata[(newdata[2]==newdata[2].unique()[j]) & (newdata[6]==newdata[6].unique()[k])])>0):
      if(newdata[2].unique()[j]=='-' or newdata[6].unique()[k]=='-'):
        continue
      else:
        two_at_time(prefer,newdata[2].unique()[j],newdata[6].unique()[k],2,6,newdata,20,0.7,0.7)

solution

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('newdk').get_worksheet(0)
set_with_dataframe(worksheet, solution)

news=newdata[(newdata[6]!='-') & (newdata[9]!='-')]

news[13].value_counts()

len(newdata[4].unique())

newdata[4].unique()

possible=[]

for j in range(1,len(newdata[2].unique())):
  for k in range(1,len(newdata[6].unique())):
    if(len(newdata[(newdata[2]==newdata[2].unique()[j]) & (newdata[6]==newdata[6].unique()[k])])>0):
      if(newdata[2].unique()[j]=='-' or newdata[6].unique()[k]=='-'):
        continue
      else:
        possible.append(newdata[2].unique()[j]+"|"+newdata[6].unique()[k])

for i in keys:
  if i not in possible:
    print(i)

for i in possible:
  if i not in keys:
    print(i)

"""**SECTION 2**"""

# !pip install --upgrade -q gspread
import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)



worksheet = gc.open('Crosses').get_worksheet(0)
rows = worksheet.get_all_values()

singcross=pd.DataFrame(rows)

singcross

singcross=singcross.drop([0],axis=0)

for i in range(3,8):
  singcross[i]=singcross[i].astype(float)

singcross.info()

def crossmanual(style,dataframe):
  dataframe=dataframe[dataframe[2]==style]
  featurepos=list(zip(dataframe[0],dataframe[1]))
  return featurepos

len(crossmanual('boho',singcross))

listo=crossmanual('boho',singcross)

basics=crossmanual('basics',singcross,0.7,0.7)

basics

Uniquefeature=[]
for i in basics:
  if i[0] not in Uniquefeature:
    Uniquefeature.append(i[0])

Uniquefeature

bohonew=[]

for i in Uniquefeature:
  for k in basics:
    if(k[0]==i):
      bohonew.append(k)

bohonew

dk=[]

dk=newdata.copy()

dk=dk[dk['Pattern Type']!='-']
  dk=dk[dk['Hem Shaped']!='-']

dk

len(dk[(dk['Pattern Type']=='ditsy floral') & (dk['Hem Shaped']=='flounce')])

newdata

posprob=[]
  negprob=[]
  freqkey1=[]
  freqkey2=[]
  keys1=[]
  keys2=[]
  style=[]
  key1key2=[]
  stylefreq=[]
  stylekey=[]
  keys=[]
  attr1=[]
  attr2=[]
  crossbew=[]

def varia(listofstyles,key1,key2,colno1,colno2,dataframe):
  # dicto={'Style':[],'Attribute':[],'Key':[],'+ Prob':[],'- Prob':[],'Freq':[]}
  dataframe=dataframe[dataframe[colno1]!='-']
  dataframe=dataframe[dataframe[colno2]!='-']
  indexval=len(dataframe[(dataframe[colno1]==key1) & (dataframe[colno2]==key2)])
  # posprob=[]
  # negprob=[]
  # freq=[]
  # keys=[]
  # attribute=[]
  for i in listofstyles:
      num=(len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))/(indexval)
      posprob.append(num)
      negprob.append(1-num)
      freqkey1.append(len(dataframe[(dataframe[colno1]==key1)]))
      freqkey2.append(len(dataframe[(dataframe[colno2]==key2)]))
      keys1.append(key1)
      keys2.append(key2)
      style.append(i)
      stylefreq.append(len(dataframe[(dataframe['Style']==i)]))
      key1key2.append(len(dataframe[(dataframe[colno1]==key1) & (dataframe[colno2]==key2)]))
      stylekey.append(len(dataframe[((dataframe[colno1]==key1) & (dataframe[colno2]==key2)) & (dataframe['Style']==i)]))
      keys.append(key1+"|"+key2)
      attr1.append(colno1)
      attr2.append(colno2)
      crossbew.append(colno1+"|"+colno2)
      
  # dicto['Style'].append(attr)
  # dicto['Attribute'].append(attribute)
  # dicto['Key'].append(keys)
  # dicto['+ Prob'].append(posprob)
  # dicto['- Prob'].append(negprob)
  # dicto['Freq'].append(freq)

len(listo)

Unique=[]
for i in listo:
  if i[0] not in Unique:
    Unique.append(i[0])

bohonew=[]

for i in Unique:
  for k in listo:
    if(k[0]==i):
      bohonew.append(k)

bohonew

for i in range(len(bohonew)):
  for j in range(i+1,len(bohonew)):
    if(listo[i][0]==listo[j][0]):
      continue
    else:
      if(len(newdata[(newdata[bohonew[i][0]]==bohonew[i][1]) & (newdata[bohonew[j][0]]==bohonew[j][1])])>0):
        # print(bohonew[i][1])
        # print(bohonew[j][1])
        feature1=bohonew[i][1]
        feature2=bohonew[j][1]
        two_at_time(['boho'],feature1,feature2,bohonew[i][0],bohonew[j][0],newdata,20,0.7,0.7)

solution=pd.DataFrame({'Cross':crossbew,'key1':attr1	,'value1':keys1 , 'key1_freq':freqkey1,'key2':attr2,'value2':keys2,'key2_freq':freqkey2,'style_name':style,'style_freq':stylefreq,'key1*key2':keys,	'value1Xvalue2':key1key2,'value1*value2*style':stylekey,'positive_probability':posprob ,'negative_probability':negprob})

solution

import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)

from gspread_dataframe import set_with_dataframe
worksheet = gc.open('newdk').get_worksheet(1)
set_with_dataframe(worksheet, solution)

# tropical
# ditsy floral
# floral|all over print
# puff sleeve|multicolor
# multicolor|high waist
# ruffle hem|short sleeve
# tie neck|short

singcross

greater20=singcross[singcross[2]=='boho']

greater20[6]=greater20[6].astype(float)

greater20[3]=greater20[3].astype(float)

greater20=greater20[greater20[6]>=0.65]

greater20=greater20[greater20[3]>50]

feature=[]

feature.append(list(zip(greater20[0],greater20[1])))

greater20

# !pip install --upgrade -q gspread
import gspread
import pandas as pd
from google.colab import auth
auth.authenticate_user()
from google.auth import default


creds, _ = default()
gc = gspread.authorize(creds)



worksheet = gc.open('newdk').get_worksheet(1)
rows = worksheet.get_all_values()

cross=pd.DataFrame(rows)

cross

cross=cross.drop([0],axis=0)

cross[10]=cross[10].astype(float)

cross=cross[cross[10]>=50]

cross

cross.iloc[1,0]

unknown=[]
for i in range(len(cross)):
  if cross.iloc[i,0] not in unknown:
    unknown.append(cross.iloc[i,0])

len(unknown)

unknown

feature.append(list(zip(list(zip(cross[1],cross[2])),list(zip(cross[4],cross[5])))))

newdata.iloc[[1]]

feature